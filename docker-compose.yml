version: "3.9"
services:
  nginx:
    container_name: ${APP_NAME}-nginx
    image: nginx:stable-alpine
    ports:
      - 80:80
      - 443:443
    volumes:
      - ./nginx/default.conf.template:/etc/nginx/templates/default.conf.template
      - ./cms:/var/www/html/cms
      - ./app:/var/www/html/app
      - ./nginx/certs:/etc/certs
    environment:
      NGINX_ENVSUBST_TEMPLATE_SUFFIX: .template
      CMS_DOMAIN: ${CMS_DOMAIN}
      APP_DOMAIN: ${APP_DOMAIN}
    depends_on:
      - cms
      - app
    restart: always
    networks:
      - default

  mysql:
    container_name: ${APP_NAME}-mysql
    image: mariadb:lts
    command: --lower_case_table_names=2
    volumes:
      - ./data/db:/var/lib/mysql:delegated
    environment:
      MYSQL_ROOT_PASSWORD: ${DB_ROOT_PASSWORD}
    restart: always
    ports:
      # Development (Already got MySQL running on 3306 so use 3356:3306)
      - 3356:3306
      # Production (Can use 3306:3306)
      # - 3306:3306
    networks:
      - default

  cms:
    container_name: ${APP_NAME}-cms
    build:
      context: .
      dockerfile: cms/Dockerfile
    volumes:
      - ./cms:/var/www/html/cms
      - ./cms/php.ini:/usr/local/etc/php/conf.d/php.ini
    depends_on:
      - mysql
    restart: always
    environment:
      DATABASE_URL: ${DATABASE_URL}
      WP_ENV: ${WP_ENV}
      WP_HOME: ${WP_HOME}
      WP_SITEURL: ${WP_SITEURL}
      AUTH_KEY: ${AUTH_KEY}
      SECURE_AUTH_KEY: ${SECURE_AUTH_KEY}
      LOGGED_IN_KEY: ${LOGGED_IN_KEY}
      NONCE_KEY: ${NONCE_KEY}
      AUTH_SALT: ${AUTH_SALT}
      SECURE_AUTH_SALT: ${SECURE_AUTH_SALT}
      LOGGED_IN_SALT: ${LOGGED_IN_SALT}
      NONCE_SALT: ${NONCE_SALT}
      GRAPHQL_JWT_AUTH_SECRET_KEY: ${GRAPHQL_JWT_AUTH_SECRET_KEY}
      HEADLESS_MODE_CLIENT_URL: ${HEADLESS_MODE_CLIENT_URL}
      VERCEL_TEAM_ID: ${VERCEL_TEAM_ID}
      VERCEL_PROJECT_ID: ${VERCEL_PROJECT_ID}
      VERCEL_API_TOKEN: ${VERCEL_API_TOKEN}
      GITHUB_REPO_ID: ${GITHUB_REPO_ID}
      ISR_REVALIDATE_SECRET: ${ISR_REVALIDATE_SECRET}
    networks:
      - default

  mailhog:
    container_name: ${APP_NAME}-mailhog
    image: mailhog/mailhog
    ports:
      - 8025:8025
      - 1025:1025
    networks:
      - default

  composer:
    container_name: ${APP_NAME}-composer
    image: composer
    working_dir: /var/www/html/cms
    # https://github.com/compose-spec/compose-spec/blob/master/spec.md#restart
    restart: "no"
    command: composer install --ignore-platform-reqs
    volumes:
      - ./cms:/var/www/html/cms

  # Development
  app:
    container_name: ${APP_NAME}-app
    build:
      context: ./app
      dockerfile: development.Dockerfile
      args:
        NPM_RC: ${NPM_RC}
        NEXT_PUBLIC_SITE_URL: ${NEXT_PUBLIC_SITE_URL}
        NEXT_PUBLIC_RECAPTCHA_SITE_KEY: ${NEXT_PUBLIC_RECAPTCHA_SITE_KEY}
        RECAPTCHA_SECRET_KEY: ${RECAPTCHA_SECRET_KEY}
        NEXT_PUBLIC_GTM_ID: ${NEXT_PUBLIC_GTM_ID}
        MAILGUN_API_KEY: ${MAILGUN_API_KEY}
        MAILGUN_DOMAIN: ${MAILGUN_DOMAIN}
        MAILGUN_HOST: ${MAILGUN_HOST}
        MAILGUN_EMAIL_FROM: ${MAILGUN_EMAIL_FROM}
        MAILGUN_EMAIL_TO: ${MAILGUN_EMAIL_TO}
        PLACES_API_KEY: ${PLACES_API_KEY}
        NEXT_PUBLIC_PLACES_PLACE_ID: ${NEXT_PUBLIC_PLACES_PLACE_ID}
        NEXT_PUBLIC_WP_GRAPHQL_URL: ${NEXT_PUBLIC_WP_GRAPHQL_URL}
        WP_AUTH_REFRESH_TOKEN: ${WP_AUTH_REFRESH_TOKEN}
        WP_PREVIEW_SECRET: ${WP_PREVIEW_SECRET}
        ISR_REVALIDATE_SECRET: ${ISR_REVALIDATE_SECRET}
    volumes:
      - ./app:/app
      - /app/node_modules # Next.js example doesn't use this, but it doesn't work for me without
    # Can expose a port if needed, but I have configured nextjs to use an nginx proxy
    # ports:
    #   - "3000:3000"
    restart: always
    networks:
      - default

  # Production - TODO, build into one Dockerfile
  # app:
  #   container_name: ${APP_NAME}-app
  #   build:
  #     context: ./app
  #     dockerfile: production.Dockerfile
  #     args:
  #       NPM_RC: ${NPM_RC}
  #     # ENV_VARIABLE: ${ENV_VARIABLE}
  #     # NEXT_PUBLIC_ENV_VARIABLE: ${NEXT_PUBLIC_ENV_VARIABLE}
  #   ports:
  #     - "3000:3000"
  #   restart: always
  #   networks:
  #     - default

# Define a network, which allows containers to communicate
# with each other, by using their container name as a hostname
networks:
  default:
    name: ${APP_NAME}-network
    external: true
